name: 'Test HN2B Action'

on: ['push']

jobs:
  test:
    name: >-
      Test HN2B Action
    runs-on: 'ubuntu-latest'
    outputs:
      random1: '${{ env.RANDOM1 }}'
      random2: '${{ env.RANDOM2 }}'
      image: '${{ env.IMAGE }}'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
      - name: 'Get a random number'
        run: |
          echo "RANDOM1=$RANDOM" >> $GITHUB_ENV
          echo "RANDOM2=$RANDOM" >> $GITHUB_ENV
      - name: 'Get Image Name'
        id: 'image-name'
        uses: './'
        with:
          image: 'ghcr.io/taughz/hn2b-test'
          context: 'test/image'
          build-args: |
            FOO=${{ env.RANDOM1 }}
            BAR=${{ env.RANDOM2 }}
          name-only: true
      - name: 'Check Image Name'
        run: |
          IMAGE=${{ steps.image-name.outputs.image }}
          if ! echo "$IMAGE" | grep -Eq ':hn2b-[a-z0-9]{32}'; then
              echo "Image name did not match expected format: $IMAGE" >&2
              exit 1
          fi
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: 'Build Image'
        id: 'build-image'
        uses: './'
        with:
          image: 'ghcr.io/taughz/hn2b-test'
          context: 'test/image'
          build-args: |
            FOO=${{ env.RANDOM1 }}
            BAR=${{ env.RANDOM2 }}
          registry-pass: '${{ secrets.REGISTRY_TOKEN }}'
      - name: 'Check Built Image'
        run: |
          BUILT_IMAGE=${{ steps.build-image.outputs.image }}
          if [ -z "$BUILT_IMAGE" -o "$BUILT_IMAGE" != "$IMAGE" ]; then
              echo "Built image did not match expected image: $BUILT_IMAGE" >&2
              exit 1
          fi
          HAD_IMAGE=${{ steps.build-image.outputs.had-image }}
          if [ "$HAD_IMAGE" != "false" ]; then
              echo "Expected to NOT have an image!" >&2
              exit 1
          fi
          HAD_REMOTE_IMAGE=${{ steps.build-image.outputs.had-remote-image }}
          if [ "$HAD_REMOTE_IMAGE" != "false" ]; then
              echo "Expected to NOT have a remote image!" >&2
              exit 1
          fi
          WAS_PULLED=${{ steps.build-image.outputs.was-pulled }}
          if [ "$WAS_PULLED" != "false" ]; then
              echo "Expected the image to NOT be pulled!" >&2
              exit 1
          fi
          WAS_BUILT=${{ steps.build-image.outputs.was-built }}
          if [ "$WAS_BUILT" != "true" ]; then
              echo "Expected the image to be built!" >&2
              exit 1
          fi
      - name: 'Build (Or Not Build) Image Again'
        id: 'not-build-image'
        uses: './'
        with:
          image: 'ghcr.io/taughz/hn2b-test'
          context: 'test/image'
          build-args: |
            FOO=${{ env.RANDOM1 }}
            BAR=${{ env.RANDOM2 }}
          registry-pass: '${{ secrets.REGISTRY_TOKEN }}'
      - name: 'Check Not Built Image'
        run: |
          BUILT_IMAGE=${{ steps.not-build-image.outputs.image }}
          if [ -z "$BUILT_IMAGE" -o "$BUILT_IMAGE" != "$IMAGE" ]; then
              echo "Built image did not match expected image: $BUILT_IMAGE" >&2
              exit 1
          fi
          HAD_IMAGE=${{ steps.not-build-image.outputs.had-image }}
          if [ "$HAD_IMAGE" != "true" ]; then
              echo "Expected to have an image!" >&2
              exit 1
          fi
          HAD_REMOTE_IMAGE=${{ steps.not-build-image.outputs.had-remote-image }}
          if [ "$HAD_REMOTE_IMAGE" != "false" ]; then
              echo "Expected to NOT have a remote image!" >&2
              exit 1
          fi
          WAS_PULLED=${{ steps.not-build-image.outputs.was-pulled }}
          if [ "$WAS_PULLED" != "false" ]; then
              echo "Expected the image to NOT be pulled!" >&2
              exit 1
          fi
          WAS_BUILT=${{ steps.not-build-image.outputs.was-built }}
          if [ "$WAS_BUILT" != "false" ]; then
              echo "Expected the image to NOT be built!" >&2
              exit 1
          fi
      - name: 'Push Image'
        id: 'push-image'
        uses: './'
        with:
          image: 'ghcr.io/taughz/hn2b-test'
          context: 'test/image'
          build-args: |
            FOO=${{ env.RANDOM1 }}
            BAR=${{ env.RANDOM2 }}
          # Because the image is only pushed when it is built (usually what you
          # want), we must force a rebuild with the 'no-cache' option
          push: true
          no-cache: true
          registry-pass: '${{ secrets.REGISTRY_TOKEN }}'
      - name: 'Check Pushed Image'
        run: |
          BUILT_IMAGE=${{ steps.push-image.outputs.image }}
          if [ -z "$BUILT_IMAGE" -o "$BUILT_IMAGE" != "$IMAGE" ]; then
              echo "Built image did not match expected image: $BUILT_IMAGE" >&2
              exit 1
          fi
          HAD_IMAGE=${{ steps.push-image.outputs.had-image }}
          if [ "$HAD_IMAGE" != "true" ]; then
              echo "Expected to have an image!" >&2
              exit 1
          fi
          HAD_REMOTE_IMAGE=${{ steps.push-image.outputs.had-remote-image }}
          if [ "$HAD_REMOTE_IMAGE" != "false" ]; then
              echo "Expected to NOT have a remote image!" >&2
              exit 1
          fi
          WAS_PULLED=${{ steps.push-image.outputs.was-pulled }}
          if [ "$WAS_PULLED" != "false" ]; then
              echo "Expected the image to NOT be pulled!" >&2
              exit 1
          fi
          WAS_BUILT=${{ steps.push-image.outputs.was-built }}
          if [ "$WAS_BUILT" != "true" ]; then
              echo "Expected the image to be built!" >&2
              exit 1
          fi

  test_pull:
    name: >-
      Test HN2B Action (Pull)
    runs-on: 'ubuntu-latest'
    needs: ['test']
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
      - name: 'Build (Or Pull) Image Again'
        id: 'pull-image'
        uses: './'
        with:
          image: 'ghcr.io/taughz/hn2b-test'
          context: 'test/image'
          build-args: |
            FOO=${{ needs.test.outputs.random1 }}
            BAR=${{ needs.test.outputs.random2 }}
          registry-pass: '${{ secrets.REGISTRY_TOKEN }}'
      - name: 'Check Pulled Image'
        run: |
          IMAGE=${{ needs.test.outputs.image }}
          BUILT_IMAGE=${{ steps.pull-image.outputs.image }}
          if [ -z "$BUILT_IMAGE" -o "$BUILT_IMAGE" != "$IMAGE" ]; then
              echo "Built image did not match expected image: $BUILT_IMAGE" >&2
              exit 1
          fi
          HAD_IMAGE=${{ steps.pull-image.outputs.had-image }}
          if [ "$HAD_IMAGE" != "false" ]; then
              echo "Expected to NOT have an image!" >&2
              exit 1
          fi
          HAD_REMOTE_IMAGE=${{ steps.pull-image.outputs.had-remote-image }}
          if [ "$HAD_REMOTE_IMAGE" != "true" ]; then
              echo "Expected to have a remote image!" >&2
              exit 1
          fi
          WAS_PULLED=${{ steps.pull-image.outputs.was-pulled }}
          if [ "$WAS_PULLED" != "true" ]; then
              echo "Expected the image to be pulled!" >&2
              exit 1
          fi
          WAS_BUILT=${{ steps.pull-image.outputs.was-built }}
          if [ "$WAS_BUILT" != "false" ]; then
              echo "Expected the image to NOT be built!" >&2
              exit 1
          fi

  test_skip_pull:
    name: >-
      Test HN2B Action (Skip Pull)
    runs-on: 'ubuntu-latest'
    needs: ['test']
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
      - name: 'Build (Or Not Pull) Image Again'
        id: 'skip-pull-image'
        uses: './'
        with:
          image: 'ghcr.io/taughz/hn2b-test'
          context: 'test/image'
          build-args: |
            FOO=${{ needs.test.outputs.random1 }}
            BAR=${{ needs.test.outputs.random2 }}
          registry-pass: '${{ secrets.REGISTRY_TOKEN }}'
          skip-pull: true
      - name: 'Check Not Pulled Image'
        run: |
          IMAGE=${{ needs.test.outputs.image }}
          BUILT_IMAGE=${{ steps.skip-pull-image.outputs.image }}
          if [ -z "$BUILT_IMAGE" -o "$BUILT_IMAGE" != "$IMAGE" ]; then
              echo "Built image did not match expected image: $BUILT_IMAGE" >&2
              exit 1
          fi
          HAD_IMAGE=${{ steps.skip-pull-image.outputs.had-image }}
          if [ "$HAD_IMAGE" != "false" ]; then
              echo "Expected to NOT have an image!" >&2
              exit 1
          fi
          HAD_REMOTE_IMAGE=${{ steps.skip-pull-image.outputs.had-remote-image }}
          if [ "$HAD_REMOTE_IMAGE" != "true" ]; then
              echo "Expected to have a remote image!" >&2
              exit 1
          fi
          WAS_PULLED=${{ steps.skip-pull-image.outputs.was-pulled }}
          if [ "$WAS_PULLED" != "false" ]; then
              echo "Expected the image to NOT be pulled!" >&2
              exit 1
          fi
          WAS_BUILT=${{ steps.skip-pull-image.outputs.was-built }}
          if [ "$WAS_BUILT" != "false" ]; then
              echo "Expected the image to NOT be built!" >&2
              exit 1
          fi
